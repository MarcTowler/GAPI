<?php
namespace API\Controllers;

use API\Library;
use API\Model;

class User extends Library\BaseController
{
	private $_db;
	protected $_validUser;

	public function __construct()
	{
		parent::__construct();

		$this->_db = new Model\UserModel();
	}

	public function __destruct()
	{
		parent::__destruct(); // TODO: Change the autogenerated stub
	}

	public function registerUser()
	{
		$this->_log->set_message("RegisterUser called", "INFO");

		if($this->_auth->validate_token($this->_headers['token'], $this->_headers['user'])['level'] != 4)
		{
			return $this->_output->output(401, "Auhtorization failed", false);
		}

		$data = file_get_contents('php://input');

		$success = false;
		$output = '';
		$data = json_decode($data, true);
		//user would type !register, bot will DM them some details...

		//check that $_POST exists and is not empty
		if(!isset($data) || empty($data))
		{
			$output = "ERROR: POST data is missing, try again!";
		} else {
			$tmp = ($this->_headers['user'] == 'discord_bot') ? $this->_db->getUser($data['did'], true) : $this->_db->getUser($data['tid'], true);

			//check if user exists
			if(is_array($tmp))
			{
				$success = false;
				$output = "User " . $data['name'] . " already exists";
			} else {
				//bot to handle validation of data before tranmission.... Next, lets check the user doesn't exist then submit
				$success = ($this->_db->registerPlayer($data, ($this->_headers['user'] == 'discord_bot') ? 'discord' : 'twitch') == true) ? true : false;
				$output = "User " . $data['name'] . " has been registered!";
			}
		}

		return (!$success) ? $this->_output->output(409, $output, false) : $this->_output->output(200, $output, false);
	}

	public function registerPlayer()
	{
		$this->_log->set_message("registerUser called", "INFO");

		if($this->_auth->validate_token($this->_headers['token'], $this->_headers['user'])['level'] != 4)
		{
			return $this->_output->output(401, "Auhtorization failed", false);
		}

		$data = file_get_contents('php://input');

		$success = false;
		$output = '';
		$data = json_decode($data, true);
		//user would type !register, bot will DM them some details...

		//check that $_POST exists and is not empty
		if(!isset($data) || empty($data))
		{
			$output = "ERROR: POST data is missing, try again!";
		} else {
			$tmp = $this->_db->getPlayer($data['name'], false);

			//check if user exists
			if(is_array($tmp) && $tmp['registered'] == 1)
			{
				$success = false;
				$output = "User " . $data['name'] . " already exists and is registered";
			} else {
				//bot to handle validation of data before tranmission.... Next, lets check the user doesn't exist then submit
				$success = ($this->_db->registerPlayer($data, ($this->_headers['user'] == 'discord_bot') ? 'discord' : 'twitch') == true) ? true : false;
				$output = "User " . $data['name'] . " has been registered!";
			}
		}

		return (!$success) ? $this->_output->output(409, $output, false) : $this->_output->output(200, $output, false);
	}

	public function updatePlayer() //setter
	{
		$this->_log->set_message("updatePlayer called", "INFO");

		if($this->_auth->validate_token($this->_headers['token'], $this->_headers['user'])['level'] != 4)
		{
			return $this->_output->output(401, "Auhtorization failed", false);
		}

		//lets see what needs updating and check that POST is actually set
		$success = false;
		$output = '';

		if(!isset($_POST) || empty($_POST) || !isset($this->_params[0]))
		{
			$output = "ERROR: POST data is missing, try again!";
		} else {
			//store in the DB and check for update
			$output = ($this->_db->updatePlayer($_POST, $this->_params[0]) == true) ? "Player Updated" : "Something went wrong";

			$success = ($output == "Something went wrong") ? false : true;
		}


		return (!$success) ? $this->_output->output(400, $output, false) : $this->_output->output(200, $output, false);
	}

	public function getPlayer() //getter
	{
		$this->_log->set_message("Getting player, either username or id " . $this->_params[0], "INFO");

		$output = [];
		$success = false;

		//check to see what username is being pulled
		//api/User/getPlayer/PLAYERNAME
		if(isset($this->_params[0]))
		{
			//this is set if you are calling your own stats as we will pull via ID
			$id_flag = (isset($this->_params[1])) ? $this->_params[1] : false;

			//lets check the db for the player name
			$tmp                   = [];
			$u                     = $this->_db->getPlayer($this->_params[0], $id_flag);
			$output                = $this->_db->getClass($u['class']);
			$output                = $this->_db->getGear($u['uid']);
			$output['attack_msg']  = isset($output['weapon'][0]['attack_msg']) ? $output['weapon'][0]['attack_msg'] : 'used their fist to hit';
			$output['defense_msg'] = 'taking a step back';

			for($i = 0; $i < sizeof($output['armour']); $i++)
			{
				switch($output['armour'][$i]['fit_position'])
				{
					case 'head':
						$tmp['head'] = $output['armour'][$i];
						$output['str'] += $output['armour'][$i]['str_mod'];
						$output['def'] += $output['armour'][$i]['def_mod'];
						$output['spd'] += $output['armour'][$i]['spd_mod'];
						$output['dex'] += $output['armour'][$i]['dex_mod'];

						break;
					case 'chest':
						$tmp['chest'] = $output['armour'][$i];
						$output['str'] += $output['armour'][$i]['str_mod'];
						$output['def'] += $output['armour'][$i]['def_mod'];
						$output['spd'] += $output['armour'][$i]['spd_mod'];
						$output['dex'] += $output['armour'][$i]['dex_mod'];

						break;
					case 'arms':
						$tmp['arms'] = $output['armour'][$i];
						$output['defense_msg'] = $output['armour'][$i]['defense_msg'];
						$output['str'] += $output['armour'][$i]['str_mod'];
						$output['def'] += $output['armour'][$i]['def_mod'];
						$output['spd'] += $output['armour'][$i]['spd_mod'];
						$output['dex'] += $output['armour'][$i]['dex_mod'];

						break;
					case 'legs':
						$tmp['legs'] = $output['armour'][$i];
						$output['str'] += $output['armour'][$i]['str_mod'];
						$output['def'] += $output['armour'][$i]['def_mod'];
						$output['spd'] += $output['armour'][$i]['spd_mod'];
						$output['dex'] += $output['armour'][$i]['dex_mod'];

						break;
					case 'feet':
						$tmp['feet'] = $output['armour'][$i];
						$output['str'] += $output['armour'][$i]['str_mod'];
						$output['def'] += $output['armour'][$i]['def_mod'];
						$output['spd'] += $output['armour'][$i]['spd_mod'];
						$output['dex'] += $output['armour'][$i]['dex_mod'];

						break;
				}
			}

			$output['armour'] = $tmp;

			if(is_array($output))
			{
				$success = true;
			} else {
				$output = "User does not exist";
			}
		} else {
			$output = "You forgot to specify a player name to check";
		}

		return (!$success) ? $this->_output->output(400, $output, false) : $this->_output->output(200, $output, false);
	}

	public function getInventory()
	{
		$this->_log->set_message("Getting inventory of user " . $this->_params[0], "INFO");

		$output = $this->_db->getUserItems($this->_params[0]);

		return $this->_output->output(200, $output, false);
	}

	public function updateCoins()
	{
		$this->_log->set_message("updating coins for user with discord id of " . $this->_params[0], "INFO");

		$input = json_decode(file_get_contents('php://input'), true);

		$char = $this->_db->getPlayer($input['discord_id'], true);

		$input['pouch'] = ($char['pouch'] < $input['pouch']) ? $char['pouch'] : $input['pouch'];

		$output = $this->_db->updateCoin($char['username'], $input['pouch'], $input['win']);

		return $this->_output->output(200, $output, false);
	}

	public function fightWin()
	{
		//$headers = ['token' => $this->_config->getSettings('BOT_TOKEN'), 'user' => 'api_user'];

		$input = json_decode(file_get_contents('php://input'), true);
		$char = $this->_db->getPlayer($input['discord_id'], true);

		$input['pouch'] = ($char['pouch'] < $input['pouch']) ? $char['pouch'] : $input['pouch'];
		$input['xp'] = ($char['xp'] < $input['xp']) ? $char['xp'] : $input['xp'];

		$this->_log->set_message("fightWin called for user id" . $input['discord_id'] . " and they " . $input['win'] . " for " . $input['pouch'], "INFO");
		$output['coins'] = $this->_db->updateCoin($char['username'], $input['pouch'], $input['win']);
		$output['xp']    = $this->_db->updateXP($char['username'], $input['xp'], $input['win']);

		//Need to update player and monster fight stats, need to update XP, coin and HP for player, also updateXP() might be needed to be a seperate private function here to check for level up
		$this->_db->updatePveStats($char['cid'], $input['monster'], $input['win']);
		$this->_guzzle->get('https://gapi.itslit.uk/Monster/updateStats/' . $input['monster'] . '/' . $input['win']);

		return $this->_output->output(200, true, false);
	}

	public function getCoins()
	{
		$this->_log->set_message("Getting coins of user id " . $this->_params[0], "INFO");

		$user = $this->_params[0];
		$flag = (isset($this->_params[1])) ? $this->_params[1] : false;

		$pouch = $this->_db->getCoins($user, $flag);

		return $this->_output->output(200, $pouch, true);
	}

	public function levelUp()
	{
		$this->_log->set_message("checking level up of user id " . $this->_params[0], "INFO");

		$uid = $this->_params[0];
		$xp  = $this->_params[1];

		$levelUp = false;

		//lets get the user's current level and check against the curve
		$player = $this->_db->getPlayer($uid, true);

		switch($player['level'])
		{
			case 1:
				if(((int)$player['xp'] + $xp) >= 101.27)
				{
					$levelUp = true;
					$this->_db->level($player['username']);
				}

				break;
			case 2:
				if(((int)$player['xp'] + $xp) >= 210.12)
				{
					$levelUp = true;
					$this->_db->level($player['username']);
				}

				break;
			case 3:
				if(((int)$player['xp'] + $xp) >= 334.16)
				{
					$levelUp = true;
					$this->_db->level($player['username']);
				}

				break;
			case 4:
				if(((int)$player['xp'] + $xp) >= 480.96)
				{
					$levelUp = true;
					$this->_db->level($player['username']);
				}

				break;
			case 5:
				if(((int)$player['xp'] + $xp) >= 658.13)
				{
					$levelUp = true;
					$this->_db->level($player['username']);
				}

				break;
			case 6:
				if(((int)$player['xp'] + $xp) >= 873.24)
				{
					$levelUp = true;
					$this->_db->level($player['username']);
				}

				break;
			case 7:
				if(((int)$player['xp'] + $xp) >= 1133.90)
				{
					$levelUp = true;
					$this->_db->level($player['username']);
				}

				break;
			case 8:
				if(((int)$player['xp'] + $xp) >= 1447.68)
				{
					$levelUp = true;
					$this->_db->level($player['username']);
				}

				break;
			case 9:
				if(((int)$player['xp'] + $xp) >= 1822.19)
				{
					$levelUp = true;
					$this->_db->level($player['username']);
				}

				break;
			case 10:
				if(((int)$player['xp'] + $xp) >= 2265)
				{
					$levelUp = true;
					$this->_db->level($player['username']);
				}

				break;
			case 11:
				if(((int)$player['xp'] + $xp) >= 2783.72)
				{
					$levelUp = true;
					$this->_db->level($player['username']);
				}

				break;
			case 12:
				if(((int)$player['xp'] + $xp) >= 3385.92)
				{
					$levelUp = true;
					$this->_db->level($player['username']);
				}

				break;
			case 13:
				if(((int)$player['xp'] + $xp) >= 4079.21)
				{
					$levelUp = true;
					$this->_db->level($player['username']);
				}

				break;
			case 14:
				if(((int)$player['xp'] + $xp) >= 4871.16)
				{
					$levelUp = true;
					$this->_db->level($player['username']);
				}

				break;
			case 15:
				if(((int)$player['xp'] + $xp) >= 5769.38)
				{
					$levelUp = true;
					$this->_db->level($player['username']);
				}

				break;
			case 16:
				if(((int)$player['xp'] + $xp) >= 6781.44)
				{
					$levelUp = true;
					$this->_db->level($player['username']);
				}

				break;
			case 17:
				if(((int)$player['xp'] + $xp) >= 7914.95)
				{
					$levelUp = true;
					$this->_db->level($player['username']);
				}

				break;
			case 18:
				if(((int)$player['xp'] + $xp) >= 9177.48)
				{
					$levelUp = true;
					$this->_db->level($player['username']);
				}

				break;
			case 19:
				if(((int)$player['xp'] + $xp) >= 10576.64)
				{
					$levelUp = true;
					$this->_db->level($player['username']);
				}

				break;
			case 20:
				if(((int)$player['xp'] + $xp) >= 12120)
				{
					$levelUp = true;
					$this->_db->level($player['username']);
				}

				break;
			case 21:
				if(((int)$player['xp'] + $xp) >= 13815.17)
				{
					$levelUp = true;
					$this->_db->level($player['username']);
				}

				break;
			case 22:
				if(((int)$player['xp'] + $xp) >= 15669.72)
				{
					$levelUp = true;
					$this->_db->level($player['username']);
				}

				break;
			case 23:
				if(((int)$player['xp'] + $xp) >= 17691.26)
				{
					$levelUp = true;
					$this->_db->level($player['username']);
				}

				break;
			case 24:
				if(((int)$player['xp'] + $xp) >= 19887.36)
				{
					$levelUp = true;
					$this->_db->level($player['username']);
				}

				break;
			case 25:
				if(((int)$player['xp'] + $xp) >= 22265.63)
				{
					$levelUp = true;
					$this->_db->level($player['username']);
				}

				break;
			case 26:
				if(((int)$player['xp'] + $xp) >= 24833.64)
				{
					$levelUp = true;
					$this->_db->level($player['username']);
				}

				break;
			case 27:
				if(((int)$player['xp'] + $xp) >= 27599)
				{
					$levelUp = true;
					$this->_db->level($player['username']);
				}

				break;
			case 28:
				if(((int)$player['xp'] + $xp) >= 30569.28)
				{
					$levelUp = true;
					$this->_db->level($player['username']);
				}

				break;
			case 29:
				if(((int)$player['xp'] + $xp) >= 33752.09)
				{
					$levelUp = true;
					$this->_db->level($player['username']);
				}

				break;
			case 30:
				if(((int)$player['xp'] + $xp) >= 37155)
				{
					$levelUp = true;
					$this->_db->level($player['username']);
				}

				break;
			case 31:
				if(((int)$player['xp'] + $xp) >= 40785.62)
				{
					$levelUp = true;
					$this->_db->level($player['username']);
				}

				break;
			case 32:
				if(((int)$player['xp'] + $xp) >= 44651.52)
				{
					$levelUp = true;
					$this->_db->level($player['username']);
				}

				break;
			case 33:
				if(((int)$player['xp'] + $xp) >= 48760.31)
				{
					$levelUp = true;
					$this->_db->level($player['username']);
				}

				break;
			case 34:
				if(((int)$player['xp'] + $xp) >= 53119.56)
				{
					$levelUp = true;
					$this->_db->level($player['username']);
				}

				break;
			case 35:
				if(((int)$player['xp'] + $xp) >= 57736.88)
				{
					$levelUp = true;
					$this->_db->level($player['username']);
				}

				break;
			case 36:
				if(((int)$player['xp'] + $xp) >= 62619.84)
				{
					$levelUp = true;
					$this->_db->level($player['username']);
				}

				break;
			case 37:
				if(((int)$player['xp'] + $xp) >= 67776.05)
				{
					$levelUp = true;
					$this->_db->level($player['username']);
				}

				break;
			case 38:
				if(((int)$player['xp'] + $xp) >= 73213.08)
				{
					$levelUp = true;
					$this->_db->level($player['username']);
				}

				break;
			case 39:
				if(((int)$player['xp'] + $xp) >= 78938.54)
				{
					$levelUp = true;
					$this->_db->level($player['username']);
				}

				break;
			case 40:
				if(((int)$player['xp'] + $xp) >= 84960)
				{
					$levelUp = true;
					$this->_db->level($player['username']);
				}

				break;
		}

		if($levelUp == true)
		{
			return $this->_output->output(200, ['level up' => true, 'new level' => $player['level'] + 1]);
		} else {
			return $this->_output->output(202, ['level up' => false]);
		}
	}

	public function equip()
	{
		$this->_log->set_message("equipping gear for user id " . $this->_params[0], "INFO");

		$user = $this->_params[0];
		$iid  = $this->_params[1];

		$output = $this->_db->equip($user, $iid, true);

		return $this->_output->output(200, $output, false);
	}

	public function unequip()
	{
		$this->_log->set_message("unequipping gear for user id " . $this->_params[0], "INFO");

		$user = $this->_params[0];
		$iid  = $this->_params[1];

		$output = $this->_db->equip($user, $iid, false);

		return $this->_output->output(200, $output, false);
	}
}